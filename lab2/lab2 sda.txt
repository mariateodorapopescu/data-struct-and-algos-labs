//1.
#include <stdio.h>
#include <stdlib.h>
int n;
int *v;
void mergesrt()
{
    int *vect;
    vect=(int*)malloc(n*sizeof(int));
    MergeSort(vect,0,n-1);
}
void MergeSort(int *vect,int st,int dr)
{
    int mijl;
    if (st==dr)
    {
      return ;
    }
    else
    {
        mijl=(st+dr)/2;
        MergeSort(vect,st,mijl);
        MergeSort(vect,mijl+1,dr);
        merge(vect,st,mijl+1,dr);
    }
}
void merge(int *vect,int st,int dr,int sfarsit)
{
    int i,j,inceput,mijl,m;
    j=0;
    inceput=st;
    mijl=dr-1;
    m=sfarsit-inceput+1;
    while(st<=mijl&&dr<=sfarsit)
    {
        if(v[st]<v[dr])
            vect[j++]=v[st++];
        else
            vect[j++]=v[dr++];
    }
    while (st<=mijl)
    {
        vect[j++]=v[st++];
    }
    //complexitate n^2 - cel mai rau caz
    //cel mai bun caz = log n
    //in general = complexitate nlogn
    while(dr<=sfarsit)
    {
        vect[j++]=v[dr++];
    }
    for (j=0;j<n;j++)
        v[inceput+j]=vect[j];
}
int main()
{
    int i;
    scanf("%d",&n);
    v=(int*)malloc(n*sizeof(int));
    for (i=0;i<n;i++)
        scanf("%d",&v[i]);
        mergesrt();
        for (i=0;i<n;i++)
        printf("%d ",v[i]);
    return 0;
}



//2.
#include <stdio.h>
#include <stdlib.h>
int binsrc(int *v,int x,int st,int dr)
{
    int mijl;
    mijl=(st+dr)/2;
    if (v[mijl]==x)
        return 1;
    else
        if (st>dr)
        return 0;
    else
    {
        if (v[mijl]<x)
            return binsrc(v,x,mijl+1,dr);
        else
            return binsrc(v,x,st,mijl-1);
    }
}
int main()
{
    int i;
    int n,m;
    int *x,*y;
    scanf("%d",&n);
    x=(int*)malloc(n*sizeof(int));
    for (i=0;i<n;i++)
    scanf("%d",&x[i]);
    scanf("%d",&m);
    y=(int*)malloc(m*sizeof(int));
    for (i=0;i<m;i++)
    scanf("%d",&y[i]);
    for (i=0;i<m;i++)
        printf("%d ",binsrc(x,y[i],0,n-1));
    return 0;
}



//3.
#include <stdio.h>
#include <stdlib.h>
int main()
{
    int n,m;
    int i,j,l;
    int *x,*y,*z;
    int k;
    scanf("%d",&n);
    x=(int*)malloc(n*sizeof(int));
     for (i=0;i<n;i++)
    scanf("%d",&x[i]);
    scanf("%d",&m);
    y=(int*)malloc(m*sizeof(int));
    for (i=0;i<m;i++)
    scanf("%d",&y[i]);
    z=(int*)malloc((n+m)*sizeof(int));
    i=0;
    j=0;
    l=0;
    while(i<n&&j<m)
    {
        if (x[i]<y[j])
        {
            z[l++]=x[i++];
        }
        else
        {
            z[l++]=y[j++];
        }
    }
    while(i<n)
    {
        z[l++]=x[i++];
    }
    while(j<m)
    {
        z[l++]=y[j++];
    }
    scanf("%d",&k);
    printf("%d",z[k-1]);
    return 0;
}


//4.
#include <stdio.h>
#include <stdlib.h>
int sum(int *v,int st,int dr)
{
    int mijl;
    mijl=(st+dr)/2;
        if (st>dr)
       return 0;
    else
    {
        return sum(v,st,mijl-1)+v[mijl]+sum(v,mijl+1,dr);
    }
}
int main()
{
    int i;
    int n;
    int s;
    s=0;
    int *v;
    scanf("%d",&n);
    v=(int*)malloc(n*sizeof(int));
    for (i=0;i<n;i++)
    scanf("%d",&v[i]);
    s=sum(v,0,n-1);
    printf("%d",s);
    return 0;
}
